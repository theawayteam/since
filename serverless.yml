service:
  name: since

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-domain-manager

custom:
  # Log all events to CloudWatch
  slack_enable_logging: true

  # The dynamodb table to store OAuth access data
  team_table_name: Since-Teams-${opt:stage}
  item_table_name: Since-Items-${opt:stage}

  # The path used to post Slack events to
  slack_event_path: slack

  # The path used to install the Slack App
  slack_install_path: slack

  # The path to redirect to after an install
  slack_install_redirect: https://theaway.team/since?installed=complete
  
  # Space delimited scopes
  slack_client_scopes: "chat:write,commands"

  # URL mappings
  domains:
    dev: dev.since.theaway.team
    prod: since.theaway.team

  customDomain:
    domainName: ${self:custom.domains.${opt:stage}}
    basePath: api
    stage: ${opt:stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs14.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
  environment:
    STAGE: ${opt:stage}
    TABLE_NAME: ${self:custom.team_table_name}
    ITEM_TABLE_NAME: ${self:custom.item_table_name}
    API_APP_ID: ${ssm:since.${opt:stage}.SLACK_APP_API_ID}
    CLIENT_ID: ${ssm:since.${opt:stage}.SLACK_CLIENT_ID}
    CLIENT_SECRET: ${ssm:since.${opt:stage}.SLACK_CLIENT_SECRET}
    CLIENT_SCOPES: ${self:custom.slack_client_scopes}
    INSTALL_REDIRECT: ${self:custom.slack_install_redirect}
    PAYMENT_DOMAIN: ${ssm:since.${opt:stage}.PAYMENT_DOMAIN}
    FREE_TIER_MAXIMUM: ${ssm:since.${opt:stage}.FREE_TIER_MAXIMUM}
    VERIFICATION_TOKEN: ${ssm:since.${opt:stage}.VERIFICATION_TOKEN}
    ENABLE_LOGGING: ${self:custom.slack_enable_logging}
    WEBHOOK: ${ssm:since.${opt:stage}.WEBHOOK}

functions:
  slack:
    handler: index.handler
    events:
      ## Slash Commands, Events, and Interactive Messages
      - http:
          path: ${self:custom.slack_event_path}
          method: post
          integration: lambda
          response:
            template: $input.path('$')

      ## OAuth Routes      
      - http:
          path: ${self:custom.slack_install_path}
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                code: true
                state: false
          response:
            statusCodes:
              201:
                pattern: ''
              301:
                pattern: http.*
                headers:
                  Location: integration.response.body.errorMessage
                  Cache-Control: "'no-cache, no-store, must-revalidate'"

resources:
  Resources:
    TeamsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.team_table_name}
    ItemDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: teamId
            AttributeType: S
        KeySchema:
          -
            AttributeName: teamId
            KeyType: HASH
          -
            AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.item_table_name}
